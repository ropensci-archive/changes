% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{call_system}
\alias{call_system}
\title{Run a system command, stopping on error}
\usage{
call_system(command, args, env = character(), max_lines = 20, p = 0.8,
  stdout = TRUE, stderr = TRUE)
}
\arguments{
\item{command}{The system command to be invoked, as a character
string.  \code{\link{Sys.which}} is useful here.}

\item{args}{A character vector of arguments to \code{command}}

\item{env}{A character vector of name=value pairs to be set as
environment variables (see \code{\link{system2}}).}

\item{max_lines}{Maximum number of lines of program output to
print with the error message.  We may prune further to get the
error message under \code{getOption("warn.length")}, however.}

\item{p}{Fraction of the error message to show from the tail of
the output if truncating on error (default is 20\% lines are head,
80\% is tail).}

\item{stdout, stderr}{Passed to \code{system2}.  Set one of these
to \code{FALSE} to avoid capturing output from that stream.  Setting
both to \code{FALSE} is not recommended.}
}
\description{
Function imported from callr package;  makes it easy to call a
system command from R and have it behave.
}
\details{
This function uses \code{system2} to call a system command fairly
portably.  What it adds is a particular way of dealing with
errors.  \code{call_system} runs the command \code{command} with
arguments \code{args} (and with optionally set environment
variables \code{env}) and hides \emph{all} produced output to
stdout and stderr.  If the command fails (currently any nonzero
exit code is counted as a failure) then \code{call_system} will
throw an R error giving
\itemize{
\item the full string of the command run
\item the exit code of the command
\item any \code{errmsg} attribute that might have been returned
\item all output that the program produced to either stdout and
stderr
}

This means that a successful invocation of a program produces no
output while the unsuccessful invocation throws an error and
prints all information to the screen (though this is delayed until
failure happens).

\code{call_system} also returns the contents of both stderr and
stdout \emph{invisibly} so that it can be inspected if needed.

The function \code{run_system} does the same thing and will be
removed as soon as code that depends on it is out of use.
}
\author{
Rich FitzJohn
}
